CLANG_DIR = /opt/homebrew/Cellar/llvm/18.1.6/bin
CC = $(CLANG_DIR)/clang++
CFLAGS = -g -Wall -Wextra --std=c++20 -Isrc -Isrc/test -Isrc/omens -I/opt/homebrew/opt/libomp/lib -fopenmp
LDFLAGS = -L/opt/homebrew/opt/libomp/lib -lomp
MAIN_SRCS = $(wildcard src/*.cpp)
OMEN_SRCS = $(wildcard src/omens/*.cpp)
SCHMEMA_SRCS = $(wildcard src/schemas/*.cpp)

TEST_SRCS = $(wildcard src/test/*.cpp)
MAIN_OBJS = $(patsubst src/%.cpp, obj/%.o, $(MAIN_SRCS))
OMEN_OBJS = $(patsubst src/omens/%.cpp, obj/omens/%.o, $(OMEN_SRCS))
SCHEMA_OBJS = $(patsubst src/schemas/%.cpp, obj/schemas/%.o, $(SCHMEMA_SRCS))
TEST_OBJS = $(patsubst src/test/%.cpp, obj/test/%.o, $(TEST_SRCS))

EXEC = bin/witchpot
TEST_EXEC = bin/witchpot-tests

all: clean main test
main: $(EXEC)
test: $(TEST_EXEC)

$(EXEC): $(MAIN_OBJS) $(OMEN_OBJS) $(SCHEMA_OBJS)
	@echo "Building $(EXEC)..."
	$(CC) $(LDFLAGS) $(MAIN_OBJS) $(OMEN_OBJS) $(SCHEMA_OBJS) -o $@

$(TEST_EXEC): $(filter-out obj/witchpot.o, $(MAIN_OBJS)) $(OMEN_OBJS) $(SCHEMA_OBJS) $(TEST_OBJS)
	@echo "Building $(TEST_EXEC)..."
	$(CC) $(LDFLAGS) $(filter-out obj/witchpot.o, $(MAIN_OBJS)) $(OMEN_OBJS) $(SCHEMA_OBJS) $(TEST_OBJS) -o $@

obj/%.o: src/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

obj/omens/%.o: src/omens/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

obj/schemas/%.o: src/schemas/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -rf bin/w* obj/*.o obj/omens/*.o obj/test/*.o $(EXEC)

# leaks --atExit -- bin/witchpot-tests
# https://gist.github.com/asimshankar/5c96acd1280507940bad9083370fe8dc
# https://medium.com/@htmbx6/build-and-train-neural-network-with-tensorflow-c-f13f22d3c5b6
# https://stackoverflow.com/questions/60005176/how-to-deal-with-clang-error-unsupported-option-fopenmp-on-travis
# https://gist.github.com/ijleesw/4f863543a50294e3ba54acf588a4a421